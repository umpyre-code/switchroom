syntax = "proto3";

package switchroom;
option java_package = "switchroom";

service Switchroom {
  // Send a message
  rpc SendMessage(Message) returns (Message);
  // Get messages from server
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  // Health check endpoint
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

// Represents one message
message Message {
  // A 16-byte blake2b hash of the message. The hash is generated by the client.
  // The to, from, body, pda, nonce, sender_public_key, recipient_public_key,
  // and sent_at fields are used to compute the hash.
  bytes hash = 1;
  // The client ID for the account sending this message.
  string from = 2;
  // The client ID for the recipient of this message.
  string to = 3;
  // The encrypted message body. Stored as bytes, rather than with base64
  // encoding, to save on storage space.
  bytes body = 4;
  // Public display of affection for this message.
  string pda = 5;
  // The time the message was received by the server.
  Timestamp received_at = 6;
  // The nonce used to encrypt this message. Stored as bytes, rather than with
  // base64 encoding, to save on storage space.
  bytes nonce = 7;
  // The public key used by the sender of this message. Stored as bytes, rather
  // than with base64 encoding, to save on storage space.
  bytes sender_public_key = 8;
  // The recipient's public key used to encrypt the message. Stored as bytes,
  // rather than with base64 encoding, to save on storage space.
  bytes recipient_public_key = 9;
  // The time at which the message was sent by the client.
  Timestamp sent_at = 10;
  // Message signature for verification. The hash, to, from, body, pda, nonce,
  // sender_public_key, recipient_public_key, and sent_at fields are used to
  // compute the signature.
  bytes signature = 11;
}

message GetMessagesRequest {
  // The client ID of the calling client. The response will include all messages
  // to and from this client.
  string client_id = 1;
  // A sketch (serialized bloom filter) of the messages to skip (i.e., don't
  // return messages in this sketch).
  string sketch = 2;
}
message GetMessagesResponse { repeated Message messages = 1; }

message HealthCheckRequest { string service = 1; }

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}

message BlobValue {
  int64 blob_length = 1;
  int64 blob_chunk = 2;
  int64 expiry = 3;
  bytes payload = 4;
}
